<?php
/**
 * Custom migration functionality for HRWeb D6 nodes
 */
class HrwebNodeMigration extends DrupalNode6Migration {

  public function __construct(array $arguments) {
    parent::__construct($arguments);
    //Map D6 input formats to OB text formats
    //Set $warn_on_override to FALSE to suppress warning messages: http://drupalcontrib.org/api/drupal/contributions!migrate!includes!migration.inc/function/Migration%3A%3AaddFieldMapping/7

    $this->addFieldMapping('body:format', 'format', FALSE)->callbacks(array(
      $this,
      'migrate_demo_d2d_get_text_format_by_id'
    ));
    $this->addFieldMapping('path', 'path', FALSE);
    // this line requires the deprecated module migrate_extras
    // https://jira.berkeley.edu/browse/DRUPALOPS-101?focusedCommentId=158227&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-158227
    // https://drupal.org/node/2023657#comment-7562763
    $this->addFieldMapping('pathauto', NULL, FALSE)->defaultValue(0);

  }

  /**
   * Translate between D6 input format id and D7 text format name.
   * For use with prepare_row()
   */
  protected function migrate_demo_d2d_get_text_format_by_id($id) {
    $output = '';

    switch ($id) {
      /*
        case 1:
          //D6: filtered html
        case 2:
          //D6: full html
          case 4:
          //D6: Editor
      */
      case 3:
        //D6: Webmaster
        $output = 'panopoly_html_text';
        break;

      default:
        $output = 'editor';
    }
    return $output;
  }

  /**
   * Code to run before first row is imported
   */
  public function preImport() {
    if (module_exists('redirect')) {
      //Settings for /admin/config/search/path/patterns
      variable_set('pathauto_node_pattern', '[node:menu-link:parents:join-path]/[node:title]');
      variable_set('pathauto_node_panopoly_page_pattern', '[node:menu-link:parents:join-path]/[node:title]');
    }


  }

  /*
   * When you transform the contents of a field, you seem to need to use prepare() as opposed to prepareRow()
   */
  public function prepare($node, stdClass $row) {
    /*
     * Translate links like
     *    a href="internal:node/111"
     * generated by LinkIt to
     *    a href="internal:node/222"
     * where 111 represents a nid in the source db and 222 represents the corresponding nid in the destination db.
     */
    $node->body[LANGUAGE_NONE][0]['value'] = preg_replace_callback("|(href=\"?[a-zA-Z/]+:)([nodefaq]+/)(\d+)|",
      'self::getDestinationNid', $node->body[LANGUAGE_NONE][0]['value']);

    //There don't seem to be bad links in the summaries, or summaries aren't displayed
    //$node->body[LANGUAGE_NONE][0]['summary'] = preg_replace_callback(...

    //Replace href=foo.com/files/bar with href=foo.com/sites/default/files/bar
    //but don't replace href=foo.com/sites/default/files/bar
    $node->body[LANGUAGE_NONE][0]['value'] = preg_replace("|(href=\"?[a-zA-Z\./:\d]*(?<!sites/default/))files/([^>]+)|",
      '\\1sites/default/files/\\2', $node->body[LANGUAGE_NONE][0]['value']);

    //Remove "../../" in urls
    $node->body[LANGUAGE_NONE][0]['value'] = preg_replace("|(href=\"?[a-zA-Z:/.\d]*)(\.\./\.\./)([^>]+)|",
      "$1$3", $node->body[LANGUAGE_NONE][0]['value']);
    //Remove "../" in urls
    $node->body[LANGUAGE_NONE][0]['value'] = preg_replace("|(href=\"?[a-zA-Z:/.\d]*)(\.\./)([^>]+)|",
      "$1$3", $node->body[LANGUAGE_NONE][0]['value']);

    return TRUE;
  }

  protected function getDestinationNid($matches) {
    // as usual: $matches[0] is the complete match
    // $matches[1] the match for the first pattern
    // enclosed in '(...)' and so on

    //Find the node_type of the source nid
    $result = Database::getConnection('default', $this->sourceConnection)
      ->query("SELECT type FROM node WHERE nid=:nid", array(':nid' => $matches[3]));
    if ($result) {
      $source_type = $result->fetchField();
    }

    $migration_machine_name = FALSE;

    /*
     * If the path contains 'faq/' we know it's a Faq node handled by the Faq
     * migration.  Otherwise, find the migration that matches the $source_type
     */
    if (strpos($matches[2], 'faq/') !== FALSE) {
      $migration_machine_name = 'Faq';
    }
    else {
      /*
       * Find the migration that operates on $source_type.
       * The nid that is linked to in the body may or may not be of the same
       * content-type (and migration) as the node that we are operating on. E.g.
       * a Basic Page may link to a Book Page.
       */
      $migrations = $this->getMigrations();
      while (list($k, $v) = each($migrations)) {
        if ($v->sourceType == $source_type) {
          $migration_machine_name = $k;
          break;
        }
      }
    }


    if ($migration_machine_name == 'Faq') {
      // Is this a link to an faq sub-category or to an individual faq node?
      // Is it a sub category link?
      $sub_cat = FALSE;
      $result = Database::getConnection('default', $this->sourceConnection)
        ->query("SELECT name FROM term_data WHERE tid=:tid", array(':tid' => $matches[3]));
      if ($result) {
        $sub_cat = $result->fetchField();
      }

      if ($sub_cat) {
        //D7 to link to a faq sub-category it's faq-page/$tid
        $matches[2] = 'faq-page/';
        //'faqs' is the machine name for the FAQ taxonomy migration
        $dest_id = parent::handleSourceMigration('faqs', $matches[3]);
      }
      else {
        //Not a sub-category link, so assume it's a link to an individual faq
        //'Faq' is the machine name for the FAQ node migration
        $matches[2] = 'node/';
        $dest_id = parent::handleSourceMigration('Faq', $matches[3]);
      }

    }
    elseif ($migration_machine_name !== FALSE) {
      //Find the destination nid that corresponds to the source nid
      $dest_id = parent::handleSourceMigration($migration_machine_name, $matches[3]);
    }
    else {
      $dest_id = "not-found";
      drupal_set_message("Source nid=" . $matches[3] . " of type $source_type could not be associated with a migration.", "error");
    }
    return $matches[1] . $matches[2] . $dest_id;
  }

  private function getMigrations() {
    //Only look up migrations once.
    static $migrations = array();
    if (count($migrations) == 0) {
      $migrations = migrate_migrations();
      drupal_set_message("Looked up migrations. (This should only happen once.)");
    }
    return $migrations;
  }

}

